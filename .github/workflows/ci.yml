name: ci
on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy,rustfmt

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build mock-auth
        working-directory: services/mock-auth
        run: cargo build --locked --release

      - name: Test mock-auth
        working-directory: services/mock-auth
        run: cargo test --locked --all-features -- --nocapture

      - name: Build mock-sink
        working-directory: services/mock-sink
        run: cargo build --locked --release

      - name: Test mock-sink
        working-directory: services/mock-sink
        run: cargo test --locked --all-features -- --nocapture

      - name: Build mock-ota
        working-directory: services/mock-ota
        run: cargo build --locked --release

      - name: Test mock-ota
        working-directory: services/mock-ota
        run: cargo test --locked --all-features -- --nocapture

  compose-smoke:
    name: Docker Compose smoke test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare environment
        working-directory: deploy/compose
        run: cp .env.example .env

      - name: Show Docker versions
        run: |
          docker --version
          docker compose version

      - name: Install tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y jq


      - name: Build images with Compose
        working-directory: deploy/compose
        env:
          COMPOSE_FILE: docker-compose.dev.yml
        run: |
          set -euxo pipefail
          retry() { n=0; until "$@"; do n=$((n+1)); if [ $n -ge 5 ]; then echo "Command failed after $n attempts: $*" >&2; exit 1; fi; sleep $((2**n)); done; }
          # Ensure fresh build and be resilient to transient registry 5xx
          retry docker compose build --pull --no-cache mock-auth mock-sink mock-ota

      - name: Start stack
        working-directory: deploy/compose
        env:
          COMPOSE_FILE: docker-compose.dev.yml
        run: |
          set -euxo pipefail
          docker compose up -d mqtt mock-auth mock-sink mock-ota mqtt-client

      - name: Wait for services to be healthy
        working-directory: deploy/compose
        env:
          COMPOSE_FILE: docker-compose.dev.yml
        run: |
          set -euxo pipefail
          # Resolve container IDs for services once
          for svc in mqtt mock-auth mock-ota; do
            echo "Waiting for $svc to be healthy..."
            cid=$(docker compose ps -q "$svc")
            if [ -z "$cid" ]; then
              echo "Failed to get container id for $svc" >&2
              docker compose ps
              exit 1
            fi
            # Poll health status up to ~120s
            for i in $(seq 1 60); do
              status=$(docker inspect -f '{{if .State.Health}}{{.State.Health.Status}}{{else}}none{{end}}' "$cid" 2>/dev/null || echo "unknown")
              if [ "$status" = "healthy" ]; then
                echo "$svc is healthy"
                break
              fi
              if [ "$status" = "unhealthy" ]; then
                echo "$svc reported UNHEALTHY; showing logs" >&2
                docker compose logs "$svc" || true
                exit 1
              fi
              sleep 2
            done
          done

      - name: Publish telemetry via mqtt-client
        working-directory: deploy/compose
        env:
          COMPOSE_FILE: docker-compose.dev.yml
        run: |
          set -euxo pipefail
          # Load .env into the shell for this step
          set -a
          . ./.env
          set +a
          # Prefer explicit topic envs; fall back to a known demo topic
          PUB_TOPIC="${PUBLISH_TOPIC:-${MQTT_TELEMETRY_TOPIC:-gaia/devices/test}}"
          # Publish a test message using env-driven broker settings
          CA_OPT=""
          if [ -n "${MQTT_CA_PATH}" ]; then
            CA_OPT="--cafile ${MQTT_CA_PATH}"
          fi
          docker compose exec -T mqtt-client sh -lc \
            "mosquitto_pub ${CA_OPT} -h \"${MQTT_HOST}\" -p \"${MQTT_PORT}\" -u \"${MQTT_USERNAME}\" -P \"${MQTT_PASSWORD}\" -t \"${PUB_TOPIC}\" -m '{\"temp\":25,\"pm25\":10,\"noise\":42,\"ts\":123456789}'"
          # Give mock-sink a moment to consume and log
          sleep 2

      - name: Obtain OTA service token
        working-directory: deploy/compose
        env:
          COMPOSE_FILE: docker-compose.dev.yml
        run: |
          set -euxo pipefail
          set -a
          . ./.env
          set +a
          SERVICE_TOKEN=$(curl -s -X POST http://localhost:8080/auth/service/login \
            -H 'Content-Type: application/json' \
            -d '{"service":"'"${MOCK_OTA_SERVICE_NAME:-mock-ota}"'","secret":"'"${MOCK_OTA_SERVICE_SECRET:-ota-dev-secret}"'"}' | jq -r '.access_token')
          echo "SERVICE_TOKEN=$SERVICE_TOKEN" >> $GITHUB_ENV

      - name: Create OTA job
        working-directory: deploy/compose
        env:
          COMPOSE_FILE: docker-compose.dev.yml
        run: |
          set -euxo pipefail
          set -a
          . ./.env
          set +a
          JOB_ID=$(curl -s -X POST http://localhost:8090/ota/jobs \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer $SERVICE_TOKEN" \
            -d '{"device_id":"test-device","artifact":"mock-firmware.bin","version":"1.0.1"}' | jq -r '.id')
          echo "JOB_ID=$JOB_ID" >> $GITHUB_ENV
          curl -s -X POST http://localhost:8090/ota/jobs/$JOB_ID/dispatch \
            -H "Authorization: Bearer $SERVICE_TOKEN" | jq
          curl -s http://localhost:8090/ota/jobs/$JOB_ID \
            -H "Authorization: Bearer $SERVICE_TOKEN" | jq

      - name: Simulate device OTA acknowledgement
        working-directory: deploy/compose
        env:
          COMPOSE_FILE: docker-compose.dev.yml
        run: |
          set -euxo pipefail
          set -a
          . ./.env
          set +a
          [ -n "$JOB_ID" ] || { echo "JOB_ID missing" >&2; exit 1; }
          docker compose exec -T mqtt-client sh -lc \
            "mosquitto_pub --cafile ${MQTT_CA_PATH:-/certs/ca.crt} -h ${MQTT_HOST?missing} -p ${MQTT_PORT?missing} \
              -u ${MQTT_USERNAME?missing} -P ${MQTT_PASSWORD?missing} \
              -t ${MQTT_TOPIC_PREFIX:-gaia/devices/}test-device/ota/status \
              -m '{\\\"job_id\\\":\\\"'"$JOB_ID"'\\\",\\\"status\\\":\\\"completed\\\",\\\"message\\\":\\\"ci acknowledgment\\\"}'"
          curl -s http://localhost:8090/ota/jobs/$JOB_ID \
            -H "Authorization: Bearer $SERVICE_TOKEN" | jq

      - name: Assert mock-sink consumed message
        working-directory: deploy/compose
        env:
          COMPOSE_FILE: docker-compose.dev.yml
        run: |
          set -euxo pipefail
          set -a
          . ./.env
          set +a
          PUB_TOPIC="${PUBLISH_TOPIC:-${MQTT_TELEMETRY_TOPIC:-gaia/devices/test}}"
          docker compose logs mock-sink | tee /tmp/mock-sink.log
          grep -E "${PUB_TOPIC}|parsed telemetry" /tmp/mock-sink.log

      - name: Tear down
        if: always()
        working-directory: deploy/compose
        env:
          COMPOSE_FILE: docker-compose.dev.yml
        run: |
          docker compose down -v
